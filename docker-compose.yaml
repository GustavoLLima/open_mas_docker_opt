version: "3.8"
services:
  # jacamo:
  #   container_name: jacamo
  #   build:
  #     context: .
  #     #dockerfile: Dockerfile_JACAMO
  #     dockerfile: Dockerfile_GRADLE
  #   tty: true           # Container alive
  #   #command: "/bin/sh -c 'gradle >> /teste/important/gradle_output.txt'"
  #   ports:
  #     - "3271:3271"
  #     - "3272:3272"
  #     - "3273:3273"
  #   volumes:
  #     - ./teste:/teste
  #     - ./teste/jacamo/integra_gold_miners:/home/gradle/project
  #   networks:
  #     - my_network
  #   depends_on:
  #     - "modelo_1"
  #     - "modelo_2"
  #     - "api"
  #     - "router"
  #     - "clear_files"
  
  # api:
  #   container_name: api
  #   build:
  #     context: .
  #     dockerfile: Dockerfile_PYTHON
  #   tty: true           # Container alive
  #   command: "python3 /teste/api.py"
  #   environment:
  #   - PYTHONUNBUFFERED=1
  #   # - request_input_file=${request_input_file}
  #   # - dead_agents_file=${dead_agents_file}
  #   # - model_input_file=${model_input_file}
  #   ports:
  #       - "5000:5000"
  #   volumes:
  #     - ./teste:/teste
  #   networks:
  #     - my_network
  #   depends_on:
  #       # - "db"
  #       db:
  #           condition: service_healthy
  #           # condition: service_completed_successfully
  
  # router:
  #   container_name: router
  #   build:
  #     context: .
  #     dockerfile: Dockerfile_PYTHON
  #   tty: true           # Container alive
  #   command: "python3 /teste/router.py"
  #   environment:
  #   - PYTHONUNBUFFERED=1
  #   # - request_input_file=${request_input_file}
  #   # - dead_agents_file=${dead_agents_file}
  #   # - model_input_file=${model_input_file}
  #   volumes:
  #     - ./teste:/teste
  #   networks:
  #     - my_network
  #   depends_on:
  #       # - "db"
  #       db:
  #           condition: service_healthy
  #           # condition: service_completed_successfully

  # db:
  #   container_name: db
  #   restart: always
  #   build:
  #       context: ./db
  #       dockerfile: Dockerfile
  #   environment:
  #       MYSQL_ROOT_PASSWORD: root
  #       MYSQL_ROOT_HOST: '%'
  #       # MYSQL_DATABASE: MYSQL_DATABASE
  #       # MYSQL_USER: MYSQL_USER
  #       # MYSQL_PASSWORD: MYSQL_PASSWORD
  #   healthcheck:
  #     test:  mysql --user=root --password=root -e 'select * from MYSQL_DATABASE.m1' MYSQL_DATABASE
  #   volumes:
  #     - ./teste:/teste
  #     - ./teste/db_file:/docker-entrypoint-initdb.d
  #   ports:
  #       - "9906:3306"
  #   networks:
  #     - my_network
  #   depends_on:
  #     - clear_files
      
  # clear_files:
  #   container_name: clear_files
  #   build:
  #     context: .
  #     dockerfile: Dockerfile_PYTHON
  #   tty: true           # Container alive
  #   command: "python3 /teste/clean_simulation_files.py"
  #   environment:
  #   - PYTHONUNBUFFERED=1
  #   volumes:
  #     - ./teste:/teste
  #   networks:
  #     - my_network
  
  # phpmyadmin:
  #     image: phpmyadmin/phpmyadmin
  #     container_name: phpmyadmin
  #     networks:
  #       - my_network
  #     ports:
  #         - '8080:80'
  #     restart: always
  #     environment:
  #         PMA_HOST: db
  #     depends_on:
  #         # - "db"
  #         db:
  #           condition: service_healthy
  #           # condition: service_completed_successfully
  # php:
  #   container_name: php
  #   build:
  #     context: .
  #     dockerfile: Dockerfile_PHP
  #   tty: true           # Container alive
  #   environment:
  #     - output_agents=${output_agents}
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./teste:/var/www/html
  #     - ./teste:/teste
  #   depends_on:
  #         # - "db"
  #         db:
  #           condition: service_healthy
  #           # condition: service_completed_successfully
  #   networks:
  #     - my_network

  modelo_1:
    container_name: modelo_1
    build:
      context: .
      dockerfile: Dockerfile_NETLOGO
    tty: true           # Container alive
    command: "/bin/sh -c 'python3 /teste/python_execute_netlogo.py >> /teste/important/m1_output.txt'"
    environment:
    - PYTHONUNBUFFERED=1
    - my_hostname=modelo_1
    - model_file=/teste/m1_varios_arquivos.nlogo
    - experiment=experiment1
    - auto_run=True
    volumes:
      - ./teste:/teste
    networks:
      - my_network
    # depends_on:
    #   - "router"
    #   - "api"
    #   - "clear_files"

  modelo_2:
    container_name: modelo_2
    build:
      context: .
      dockerfile: Dockerfile_NETLOGO
    tty: true           # Container alive
    command: "/bin/sh -c 'python3 /teste/python_execute_netlogo.py >> /teste/important/m2_output.txt'"
    environment:
    - PYTHONUNBUFFERED=1
    - my_hostname=modelo_2
    - model_file=/teste/m2_varios_arquivos.nlogo
    - experiment=experiment1
    - auto_run=True
    volumes:
      - ./teste:/teste
    networks:
      - my_network
    # depends_on:
    #   - "router"
    #   - "api"
    #   - "clear_files"

# 17.08.22 - Backup, funciona 100% no lab com teste API, melhorando a ordem dos containers acima
# version: "3.8"
# services:
#   jacamo:
#     container_name: jacamo
#     build:
#       context: .
#       #dockerfile: Dockerfile_JACAMO
#       dockerfile: Dockerfile_GRADLE
#     tty: true           # Container alive
#     #command: "/bin/sh -c 'gradle >> /teste/important/gradle_output.txt'"
#     ports:
#       - "3271:3271"
#       - "3272:3272"
#       - "3273:3273"
#     volumes:
#       - ./teste:/teste
#       - ./teste/jacamo/integra_gold_miners:/home/gradle/project
#     networks:
#       - my_network
#     depends_on:
#       - "modelo_2"

#   # cartorio:
#   #   container_name: cartorio
#   #   build:
#   #     context: .
#   #     dockerfile: Dockerfile_PYTHON
#   #   tty: true           # Container alive
#   #   #command: "python3 /teste/cartorio.py"
#   #   command: "python3 /teste/initialize_db.py"
#   #   environment:
#   #   - PYTHONUNBUFFERED=1
#   #   - request_input_file=${request_input_file}
#   #   - dead_agents_file=${dead_agents_file}
#   #   - model_input_file=${model_input_file}
#   #   volumes:
#   #     - ./teste:/teste
#   #   networks:
#   #     - my_network
#   #   depends_on:
#   #       - phpmyadmin
#   api:
#     container_name: api
#     build:
#       context: .
#       dockerfile: Dockerfile_PYTHON
#     tty: true           # Container alive
#     command: "python3 /teste/api.py"
#     environment:
#     - PYTHONUNBUFFERED=1
#     - request_input_file=${request_input_file}
#     - dead_agents_file=${dead_agents_file}
#     - model_input_file=${model_input_file}
#     ports:
#         - "5000:5000"
#     volumes:
#       - ./teste:/teste
#     networks:
#       - my_network
#     depends_on:
#         # - cartorio
#         - db


#   router:
#     container_name: router
#     build:
#       context: .
#       dockerfile: Dockerfile_PYTHON
#     tty: true           # Container alive
#     command: "python3 /teste/router.py"
#     environment:
#     - PYTHONUNBUFFERED=1
#     - request_input_file=${request_input_file}
#     - dead_agents_file=${dead_agents_file}
#     - model_input_file=${model_input_file}
#     volumes:
#       - ./teste:/teste
#     networks:
#       - my_network
#     # depends_on:
#     #     - cartorio

#   db:
#     container_name: db
#     restart: always
#     build:
#         context: ./db
#         dockerfile: Dockerfile
#     environment:
#         MYSQL_ROOT_PASSWORD: MYSQL_ROOT_PASSWORD
#         MYSQL_ROOT_HOST: '%'
#         # MYSQL_DATABASE: MYSQL_DATABASE
#         # MYSQL_USER: MYSQL_USER
#         # MYSQL_PASSWORD: MYSQL_PASSWORD
#     volumes:
#       - ./teste:/teste
#       - ./teste/db_file:/docker-entrypoint-initdb.d
#     ports:
#         - "9906:3306"
#     networks:
#       - my_network
#   phpmyadmin:
#       image: phpmyadmin/phpmyadmin
#       container_name: phpmyadmin
#       networks:
#         - my_network
#       ports:
#           - '8080:80'
#       restart: always
#       environment:
#           PMA_HOST: db
#       depends_on:
#           - db
#   php:
#     container_name: php
#     build:
#       context: .
#       dockerfile: Dockerfile_PHP
#     tty: true           # Container alive
#     environment:
#       - output_agents=${output_agents}
#     ports:
#       - "80:80"
#     volumes:
#       - ./teste:/var/www/html
#       - ./teste:/teste
#     networks:
#       - my_network

#   modelo_1:
#     container_name: modelo_1
#     build:
#       context: .
#       dockerfile: Dockerfile_NETLOGO
#     tty: true           # Container alive
#     command: "/bin/sh -c 'python3 /teste/python_execute_netlogo.py >> /teste/important/m1_output.txt'"
#     environment:
#     - PYTHONUNBUFFERED=1
#     - my_hostname=modelo_1
#     - model_file=/teste/m1_varios_arquivos.nlogo
#     - experiment=experiment1
#     - auto_run=True
#     volumes:
#       - ./teste:/teste
#     networks:
#       - my_network
#     depends_on:
#       # - "php"
#       - "router"
#       - "api"

#   modelo_2:
#     container_name: modelo_2
#     build:
#       context: .
#       dockerfile: Dockerfile_NETLOGO
#     tty: true           # Container alive
#     command: "/bin/sh -c 'python3 /teste/python_execute_netlogo.py >> /teste/important/m2_output.txt'"
#     environment:
#     - PYTHONUNBUFFERED=1
#     - my_hostname=modelo_2
#     - model_file=/teste/m2_varios_arquivos.nlogo
#     - experiment=experiment1
#     - auto_run=True
#     volumes:
#       - ./teste:/teste
#     networks:
#       - my_network
#     depends_on:
#       - "modelo_1"
#       - "api"





#   jacamo:
#     container_name: jacamo
#     build:
#       context: .
#       #dockerfile: Dockerfile_JACAMO
#       dockerfile: Dockerfile_GRADLE
#     tty: true           # Container alive
#     command: "/bin/sh -c 'gradle >> /teste/important/gradle_output.txt'"
#     ports:
#       - "3271:3271"
#       - "3272:3272"
#       - "3273:3273"
#     volumes:
#       - ./teste:/teste
#       - ./teste/jacamo/INTEGRANDO COM API/teste-gradle-docker/fff:/home/gradle/project
#     networks:
#       - my_network
#     depends_on:
#         - modelo_2

#   cartorio:
#     container_name: cartorio
#     build:
#       context: .
#       dockerfile: Dockerfile_PYTHON
#     tty: true           # Container alive
#     #command: "python3 /teste/cartorio.py"
#     command: "python3 /teste/initialize_db.py"
#     environment:
#     - PYTHONUNBUFFERED=1
#     - request_input_file=${request_input_file}
#     - dead_agents_file=${dead_agents_file}
#     - model_input_file=${model_input_file}
#     volumes:
#       - ./teste:/teste
#     networks:
#       - my_network
#     depends_on:
#         - phpmyadmin


#   api:
#     container_name: api
#     build:
#       context: .
#       dockerfile: Dockerfile_PYTHON
#     tty: true           # Container alive
#     command: "python3 /teste/api.py"
#     environment:
#     - PYTHONUNBUFFERED=1
#     - request_input_file=${request_input_file}
#     - dead_agents_file=${dead_agents_file}
#     - model_input_file=${model_input_file}
#     ports:
#         - "5000:5000"
#     volumes:
#       - ./teste:/teste
#     networks:
#       - my_network
#     depends_on:
#         - cartorio


#   router:
#     container_name: router
#     build:
#       context: .
#       dockerfile: Dockerfile_PYTHON
#     tty: true           # Container alive
#     command: "python3 /teste/router.py"
#     environment:
#     - PYTHONUNBUFFERED=1
#     - request_input_file=${request_input_file}
#     - dead_agents_file=${dead_agents_file}
#     - model_input_file=${model_input_file}
#     volumes:
#       - ./teste:/teste
#     networks:
#       - my_network
#     depends_on:
#         - cartorio

#   db:
#     container_name: db
#     restart: always
#     build:
#         context: ./db
#         dockerfile: Dockerfile
#     environment:
#         MYSQL_ROOT_PASSWORD: MYSQL_ROOT_PASSWORD
#         MYSQL_DATABASE: MYSQL_DATABASE
#         MYSQL_USER: MYSQL_USER
#         MYSQL_PASSWORD: MYSQL_PASSWORD
#     volumes:
#       - ./teste:/teste
#     ports:
#         - "9906:3306"
#     networks:
#       - my_network
#   phpmyadmin:
#       image: phpmyadmin/phpmyadmin
#       container_name: phpmyadmin
#       networks:
#         - my_network
#       ports:
#           - '8080:80'
#       restart: always
#       environment:
#           PMA_HOST: db
#       depends_on:
#           - db
# #   version: '3.3'
# # volumes:
# #   data:
# # services:
# #   db:
# #     image: mysql:5.6
# #     ports:
# #       - "3306:3306"
# #     volumes:
# #       - data:/var/lib/mysql
# #     environment:
# #       - MYSQL_ROOT_PASSWORD=password
# #       - MYSQL_DATABASE=app_development
# #   app:
# #     image: phpmyadmin/phpmyadmin:latest
# #     links:
# #       - db
# #     ports:
# #       - 80:80
# #     environment:
# #       - PMA_ARBITRARY=1
#   php:
#     container_name: php
#     build:
#       context: .
#       dockerfile: Dockerfile_PHP
#     tty: true           # Container alive
#     environment:
#       - output_agents=${output_agents}
#     ports:
#       - "80:80"
#     volumes:
#       - ./teste:/var/www/html
#       - ./teste:/teste
#     networks:
#       - my_network

#   modelo_1:
#     container_name: modelo_1
#     build:
#       context: .
#       dockerfile: Dockerfile_NETLOGO
#     tty: true           # Container alive
#     command: "/bin/sh -c 'python3 /teste/python_execute_netlogo.py >> /teste/important/m1_output.txt'"
#     environment:
#     - PYTHONUNBUFFERED=1
#     - my_hostname=modelo_1
#     - model_file=/teste/m1_varios_arquivos.nlogo
#     - experiment=experiment1
#     - auto_run=True
#     volumes:
#       - ./teste:/teste
#     networks:
#       - my_network
#     depends_on:
#       # - "php"
#       - "router"

#   modelo_2:
#     container_name: modelo_2
#     build:
#       context: .
#       dockerfile: Dockerfile_NETLOGO
#     tty: true           # Container alive
#     command: "/bin/sh -c 'python3 /teste/python_execute_netlogo.py >> /teste/important/m2_output.txt'"
#     environment:
#     - PYTHONUNBUFFERED=1
#     - my_hostname=modelo_2
#     - model_file=/teste/m2_varios_arquivos.nlogo
#     - experiment=experiment1
#     - auto_run=True
#     volumes:
#       - ./teste:/teste
#     networks:
#       - my_network
#     depends_on:
#       - "modelo_1"

networks:
  my_network:
    name: my_network
    driver: bridge

# version: "3.8"
# services:
#   jacamo:
#     build:
#       context: .
#       dockerfile: Dockerfile_JACAMO
#     tty: true           # Container alive
#     # command: "jacamo /teste/jacamo/src/juntando_jason_jacamo.jcm"
#     command: "jacamo ${jacamo_file}"
#     ports:
#       - "3271:3271"
#       - "3272:3272"
#       - "3273:3273"
#     volumes:
#       - ./teste:/teste
#     networks:
#       - my_network

#   # cartorio:
#   #   build:
#   #     context: .
#   #     dockerfile: Dockerfile_NETLOGO
#   #   tty: true           # Container alive
#   #   command: "python3 /teste/cartorio.py"
#   #   environment:
#   #   - PYTHONUNBUFFERED=1
#   #   - request_input_file=["/teste/important/request_new_agent.txt", "/teste/important/request_new_agent2.txt"]
#   #   - dead_agents_file=["/teste/important/send_agent.txt", "/teste/important/send_agent2.txt"]
#   #   - model_input_file=["/teste/important/receive_agent.txt", "/teste/important/receive_agent2.txt"]
#   #   volumes:
#   #     - ./teste:/teste
#   #   networks:
#   #     - my_network

#   # php:
#   #   build:
#   #     context: .
#   #     dockerfile: Dockerfile_PHP
#   #   tty: true           # Container alive
#   #   ports:
#   #     - "80:80"
#   #   volumes:
#   #     - ./teste:/var/www/html
#   #   networks:
#   #     - my_network

#   # modelo_1:
#   #   build:
#   #     context: .
#   #     dockerfile: Dockerfile_NETLOGO
#   #   tty: true           # Container alive
#   #   command: "python3 /teste/python_execute_netlogo.py"
#   #   environment:
#   #   - PYTHONUNBUFFERED=1
#   #   - my_hostname=modelo_1
#   #   - model_file=/teste/5-Open_Sugarscape_2_Constant_Growback.nlogo
#   #   - experiment=experiment1
#   #   - export_file=/teste/important/output_file.txt
#   #   - config_file=/teste/important/input_file.txt
#   #   - auto_run=True
#   #   volumes:
#   #     - ./teste:/teste
#   #   networks:
#   #     - my_network
#   #   depends_on:
#   #     - "php"
#   #     - "cartorio"

#   # modelo_2:
#   #   build:
#   #     context: .
#   #     dockerfile: Dockerfile_NETLOGO
#   #   tty: true           # Container alive
#   #   command: "python3 /teste/python_execute_netlogo.py"
#   #   environment:
#   #   - PYTHONUNBUFFERED = 1
#   #   - my_hostname=modelo_2
#   #   - model_file=/teste/6-Open_Sugarscape_2_Constant_Growback.nlogo
#   #   - experiment=experiment1
#   #   - export_file=/teste/important/output_file.txt
#   #   - config_file=/teste/important/input_file.txt
#   #   - auto_run=True
#   #   volumes:
#   #     - ./teste:/teste
#   #   networks:
#   #     - my_network
#   #   depends_on:
#   #     - "php"
#   #     - "cartorio"
#   #     - "modelo_1"

#   # router:
#   #   build:
#   #     context: .
#   #     dockerfile: Dockerfile_NETLOGO
#   #   tty: true           # Container alive
#   #   command: "python3 /teste/router.py"
#   #   environment:
#   #   - PYTHONUNBUFFERED = 1
#   #   - my_hostname=router
#   #   - output_agents=["/teste/important/output.txt"]
#   #   - general_dead_agents_file=["/teste/important/general_send_agent.txt"]
#   #   - dead_agents_file=["/teste/important/send_agent.txt", "/teste/important/send_agent2.txt"]
#   #   - model_input_file=["/teste/important/receive_agent.txt", "/teste/important/receive_agent2.txt"]
#   #   - router_type=random
#   #   volumes:
#   #     - ./teste:/teste
#   #   networks:
#   #     - my_network
#   #   depends_on:
#   #     - "php"
#   #     - "cartorio"
#   #     - "modelo_1"
#   #     - "modelo_2"

# networks:
#   my_network:
#     name: my_network
#     driver: bridge